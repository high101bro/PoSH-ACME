==================================================
v5.1.7 BETA - 28 Nov 20
==================================================

Notified that the timeout feature isn't working with the monitor jobs tab feature
	- Added code that checks how long a job has been running, then kills it if it is running too long-
		- timeout value is user adjustable
	- Query Timeouts can be set independantly when executed
	- Timed out queries
		- The Collection name displayed over the progress bar is pre-fixed with TIMED OUT
		- The color scheme for the query is turned red
		- The results are still able to be viewed if any data was collected
			- Past method would just discard all the results regardless
			- This way even timed out queries are Useful
	- Moved timeout setting to within the monitor jobs tab

Fixed bug where results didn't show the correct endpoint within the results
	- Added property called ComputerName, rather than using the variable of PSComputerName
	- Since PSComputerName is an automatic variable/property, I opted to use a new property name to avoid conflicts
	- Now the ComputerName property is also the first column... yay!

Rearranged the Options Tab
	- Moved buttons to the top
	- Moved Job Timeout to next to the Execute Script button

Job TimeOut Selection
	- Moved it from the Options Tab to right above the Execute Script Button to remind users to set it easier
	- The option auto hides/appears depending on if you select Individual Execution
		- This is to help reduce the chances that users get confused... as it's only used by Individual Exeuction

Renamed some of the GUI
	- Renmaed execution modes: Individual Execution --> Monitor Jobs
	- Renamed Tab: Results --> Info

==================================================
v5.1.6 BETA - 8 Nov 20
==================================================

Modified Completed-QueryExeuction.ps1
	- Commented out the section that searches for and removes empty directories
	- This section isn't compatible with the new monitor mode, as it deletes the directories before data can be saved to them, causing an errors
	- This was discovered when trying to make the endpoint pcap capture feature compatible with the new monitor mode

Added Monitor Jobs Tab support for Endpoint Packet captures
	- Able to view the status of each endpoint packet capture
	- Each packet capture runs in parallel when using the individual execution method
	- There's a button that allows you view view the pcap using the default registered program, like WireShark
		- One button per endpoint`
	- There's a button that allows you open the packet capture directory
	- Ability to remove individual pcap files with the remove button

Found bug, updated Endpoint Packet capture code
	- Code was missing that allowed you to get pcaps without provideing alternate credentials
	- Added the code that uses the local shells credentials

Updated Tooltip messagse for command protocols
	- Noted which protocols work with the monitor jobs feature

Added code for SMB Queries in individual execution mode
	- Now auto selects the Results tab, rather than staying on the Monitor Jobs Tab
		- The SMB query uses PSExec, which is not Job friends and has to run serially

Modified 'Open Data In Shell'
	-Changed the -ExecutionPolicy from Restricted to ByPass

Added a parameter, [switch]MonitorMode, to the Monitor-Jobs function
	- MonitorMode essentially splits the fucntion in two
		- If the switch is present, it will monitor jobs using the new individual job tracker
			- Mainly used with data queries 
		- If not, it uses the original method where and provides active status on the queries
			- Mainly used with tasks that require multiple interactions, like with the Sysmon and Procmon features
	- Added the -MonitorJobs switch to many data queries for individual collection
	- Added a couple ther parameter switches to assist with handling PSWriteHTML
		- Parameter -PSWriteHTML passes the name of the variable used to contain the data
		- Parameter -PSWriteHTMLSwitch is a swtich parameter used to select which part of the code to run

Change completion message text withing ResultsListBox
	- Original: 'Finished Collecting Data!'
	- New:      'Finished Executing Commands'

Commented out Post-MonitorJob function wherever the Monitor-Jobs -MonitorMode was located
	- this code was a wrapper for Compile-CsvFiles and Compile-XmlFiles

Renamed variables for consistency
	- There were two variables doing the same thing... Change variable names to maintain consistency
	- $CollectionCommandStartTime --> $ExecutionStartTime

Added a new links to System Tray Icon
	- Collection Folder
	- Commands and scripts
		- Endpoint Commands
		- Endpoint scripts
		- Active Directory Commands
		- Active Directory Scripts

Update Monitor-Jobs with new features and thread like capabiltiies
	- New Monitor Jobs Tab
		- dynamically adds progress bars for started jobs
		- able to stop/remove jobs
		- able to view results to see mid-collection results (Out-GridView/Table View)
		- able to view results (Out-GridView/Table View)
		- able to select to be notified on each job if desired
		- automatically saves data, with ability to choose to delete each
		- change view from compact(minimized) to maximized, also support auto-max with a checkbox
		- able to view data in PowerShell terminal after collection completion for advanced manipulation
		- buttons/checkboxes to auto remove all results and auto-check/uncheck boxes
	- Support for PSWriteHTML brower data collection

Added new feature that uses PSWriteHTML to generate web pages to view data
	- Data is veiwable in:
		- Tables (w/ Search Feature)
		- Panel Search/Filter
		- Pie and Bar Charts
		- Graph Node Charts
	- PSWriteHTML is a module avaiilable to be imported from the PowerShell Gallery
		- PSWriteHTML will be packaged with PoSh-EasyWin 
		- It will be installed offline and imported automatically with this tool
	- PSWriteHTML is the first external module I'm incorporating
		- That said, there's a lot of code I haven't reviewed
			- It's currently trusted throughout the community
			- Virus scan safe
	- Generates and displays the data as a webpage
		- Also saves local copy of the data in an .html file
	- Graph data is represented as nodes with links between them
	- Also contains Built-in view of CSV data (collapsed at the top)
	- Currently have options for the following:
		- Active Directory Computers
		- Active Directory Users & Groups
		- Endpoint Login Activity
		- Endpoint Network Connections
		- Endpoint Process Data
		################# In-Progress # Endpoint PowerShell Sessions
		################# In-Progress # Endpoint Console Logins
		################# In-Progress # Endpoint CPU Data
		################# In-Progress # Endpoint RAM Data
		################# In-Progress # Endpoint Storage Data
	- You can select one or more of the above options at once
		- The charts will be combined
		- Note, the more you select, the longer it takes to load
		- Yeah section will have their own spread sheet within the Webpage (collapsed)
	- Added support for monitor-jobs tab
		- Data collected to product PSWriteHTML browser pages are started as jobs
		- Once data has finished being collected, the brower page is automatically launched

Added command to get SMB Share Access privileges
	- Added to endpoint csv command file
	- Get-SmbShare | foreach {Get-SmbShareAccess -Name $_.Name}

Updated some code for the credential rolling to increase reliability

Removed old and unnecessary files
	- Alternate PoSh-EasyWin Images
	- Old PoSh-ACME .ico and Images
	- Removed Volatility program (15 MBs!!!) omg...
	- Remove Sysinternals Strings.exe -- never ended up using it

Added new GitHub images and readme info
	- For the Beta Release of the PSWriteHTML brower results
	- For the Beta Release of the new Monitor Jobs Tab
	
==================================================
v5.1.5 - 30 Sep 20
==================================================

PowerShell Charts / Dashboards Invoke-DeepBlue
	Identified bug with - wasn't passing the regex and whitelist files into the function as parameters
	Created two additional dashboards (ghetto way), and renamed the original
		Threat Hunting (Deep Blue) All
		Threat Hunting (Deep Blue) 7 Days
		Threat Hunting (Deep Blue) 24 Hours

==================================================
v5.1.4 - 29 Sep 20
==================================================

Implemented code to freeup memory
	Originally I thought I had a memory leak, but then I learned more about Windows' Memory and Garbage Collection
	https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals#:~:text=All%20threads%20in%20the%20process,a%20time%20for%20managed%20applications.&text=The%20fewer%20objects%20allocated%20on,garbage%20collector%20has%20to%20do.
	Essentially, I implemented the following in a few choice locations to manually freeup some memory
		[System.GC]::Collect()
	It's called after:
		Charts are exited
		Queries/Collections are completed
	Garbage Collection
		Normally managed by the system and an algorithm
		For my purposes it doesn't happen often enough, so I manually execute garbage collection
	Memory release
		"The garbage collector's optimizing engine determines the best time to perform a collection based on the allocations being made. When the garbage collector performs a collection, it releases the memory for objects that are no longer being used by the application. It determines which objects are no longer being used by examining the application's roots. An application's roots include static fields, local variables and parameters on a thread's stack, and CPU registers."

Added Disposing of form objects to all the system.windows.forms.form objects
	Method: Add_Closing = { $This.dispose() }

==================================================
v5.1.3 - 28 Sep 20
==================================================

Craeted New Dashboard based off DeepBlueCLI by SANS Threat Hunting
	- It has two dashboards

Created New Dashboard with two charts for Application Crashes - Event ID 1000
	- See what applications crashed over multiple endpoints
	- See which endpoints have the most application crashes
	- The intent is that malware often crashes software... so this could be a tipper to where/what to look into

==================================================
v5.0.3 - 27 Sep 20
==================================================

My version control break down: v5.0.3
	5 = Major Version
	0 = Minor Version
	3 = Primarily Bug Fixes

Formscale - found some GUI elements that didn't have the code implementation
	- The rename popup for the computer treeview on an single endpoint wasn't scaling
	- The move popup for the computer treeview on an single endpoint wasn't scaling

Added chime sound after quarantine / un-quaentine completion

Updated the info tab with notes on WMI

Applied fixed to closing of PoSh-EasyWin
	- Added .dispose() method when closing the form

Created a User Notice and acknowledgement spash page
	- it automatically pops up during the first use of PoSh-EasyWin
	- it can be viewed again with a button located in the Options section
	- This was all in done in part to provide clarity to the user so they understand what's going on and because the info below

Brought to my attention that if you use the 'specify credentials feature"
	- Issue currently is observed when using sysmon and forwarding logs out to like a SIEM
		- If using just sysmon without forwarding to siem, event id 1 will still capture it, but it'll only on your local trusted host
		- If forwarding out to a SIEM, everyone with access to the SIEM can view them
	- If using sysmon on the localhost launching PoSh-EasyWin:
		- Avoid all this by launching PoSh-EasyWin with admin credentials and not using stored credentials ('specify credentials')
		- Don't use stored credentials - see note below
			- The stored .xml credential objects are still secured with Windows Endpoint Data Protection API and perfectly safe
			- But when extracted to use with SMB Queries, PSSession, and PSExex, and Remote Desktop they are exposed as they become command line arguments
	- Sysmon event id 1 captures process creation to include credentials within command line arguments for the following:
		- SMB Queries (using PSExec)
			- This is becuase PSExec.exe only accepts credentials as plain text arguments
			- Alternative: launch PoSh-EasyWin with admin creds and don't use 'select credentials'
		- Dropping into a PSExec session into an endpoint 
			- This is becuase PSExec.exe only accepts credentials as plain text arguments
			- Alternative: launch PoSh-EasyWin with admin creds and don't use 'select credentials'
		- Dropping into a PSSession into an endpoint
			- This is becuase the technique used to launch the PSSession in another terminal currently only possible with passing them via an argument
				- This is becuase the Start-Process cmdlet's -credential parameter doesn't correctly accept credential obejcts
				- Online research confirms this and no way around it
			- Alternative: launch PoSh-EasyWin with admin creds and don't use 'select credentials'
			- Alternative: don't hide the initial terminal that launches PoSh-EasyWin and allow that to host the PSSessions
				- Pros: Credentials are not passed via plain text
				- Cons: Limits you to only one PSSesion at a time
					    The original terminal isn't as clean of a feature and may accidently close PoSh-EasyWin
		- Remote Desktop to an endpoint
			- This is because to cmdkey.exe is needed to pass credentials to mstsc.exe (MicroSoft Terminal Services Console) aka Remote Desktop
			- cmdkey.exe is a native Windows command, and only accepts plain text
				- when credentials are pushed into cmdkey.exe, sysmon event id 1 captures it
			- Alternative: launch PoSh-EasyWin with admin creds and don't use 'select credentials'
	- Stored credentials
		- The stored .xml credential objects are still secured with Windows Endpoint Data Protection API and perfectly safe with
		- But when extracted to use with SMB Queries, PSSession, and PSExex, and Remote Desktop they are exposed as they become command line arguments
	- I wasn't able to observe credentials being recorded within the Security Event Log of Event Id 4688, Process Creations
	- Used the following to verify if credentials were present in logs
		- Installed sysmon
			- Get-WinEvent -FilterHashtable @{logname="Microsoft-Windows-Sysmon/Operational";id=1;}| where {$_.message -match 'powershell.exe'} | Select -ExpandProperty message
				- Analysed the output to see if credentials were present
		- Viewed the built-in Security Log Event Id 4688
			- Get-WinEvent -LogName Security | where {$_.Id -eq 4688}
				- search for powershell, psexec, and mstsc

Ended up pushing this update to:
	- include the above notes in my change log
	- updated parts of the code to obfuscate credentials when dropping into a PSSession (base64)
	- tweeked the PSExec code 
		- reliably lauch without alterate credentials
			- uses the credentials of those used to launch PoSh-EasyWin
		- to reliably pass credentials
			-  uses the credntials if useing 'select credentials'


==================================================
v5.0.2 - 14 Sep 2020
==================================================

Added auto password rolling to dashboards
	- all of them... for some reason I forgot to when I built them and added the imbedded update feature

Added delay to auto password rolling
	- delay = 3 Seconds

Enumerations Tab
	- Added checknbox to Scan from Checked Endpoints
		- it auto enables/disables the other fields
	- Rewrote the display code for the enumerations tab
	- Removed Import from domain from Enumeration Tab
		- Not needed as you can just import from AD with the Actions Tab

Renamed functions for easier finding
	- Add-CommandTreeNode  --> Add-NodeCommand
	- Add-ComputerTreeNode --> Add-NodeComputer

Change the following fonts to DarkRed in the computer treeview contextmenu
	- Remote Desktop
	- PSSession
	- PSExec
	- ICMP Ping
	- RPC Port Check
	- SMB Port Check
	- WinRM Check

==================================================
v5.0.3 - 10 September 2020
==================================================



Made it so the green boxes under the action boxes green up whenever an endpoint is checked
	- turns back to grey when no endpoints are selected

Added the credential rolling feature to all the domain wide action tasks
	- kill processes
	- stop services
	- log out users
	- kill network connections
	- quarantine/un-quarantine endpoints

Added $script:ComputerListHistory
	- if the same computers are queried back to back, it wont prompt for testing connection

Added message to View Event Log that notifies you of an alternate method, if it's not working
	- not the best solution, but it'll the only work around for an in domain solution

Fixed issue where the getchilditemrecurse function wasn't working
	- verified both file search and registry sections

When PoSh-EasyWin launches for the first time, the Open Folder button does work becuase there hasn't been a collection yet
	- Added code to check if the dir doesn't exist, then go to the higher level collections dir
	- If the above also fails, it'll go the the root dir for PoSh-EasyWin

Bug Fix with Passing Credentials to Remote Desktop
	- fixed a mistake when I previously was modifying the cmdkey and mstsc for fullscreen and noprompt

Rewrote code that launches the following features when you left/right click computer nodes
	- Remote Desktop
	- PSSession
	- PSExec
	- * The legacy buttons currently only notify users how to find the feature
	
==================================================
v5.0 - 9 September 2020
==================================================

Added Network Connections Dashboard
	- added feature to sort by value name and unique count

Fixed issue with .xml data not compiling multiple .xml's into one... paths were missing a '\'

Added option for Individual Execution to not delete Results by Endpoint .csv and .xml files they're compiled

Added SMB port check to computer treeview context menu

Optimize coding to better recommned individual exeuction and session based modes

Added option to keep or delete .etl and .cab files associated with Packet captures

Added query builder beneather the command treeview
	- by default it only shows get commands
	- currently strips out the -computername paratmer for get commands, you should use the computer treeview to select endpoints
	- the auto cmdlet detection verifies cmdlet name and passes it along to show-command to fill out parameters correctly
	- able to override just the get feature to include all Cmdlets
		- good use case is: test-connection -computername computer1
		- this allows you to test if the computer itself can ping or access another computer

Fixed bug/broken code within the function Monitor-Jobs
	- Issue 1: Improper check to see if job time was exceeded based of desired timeout
	- Issue 2: If for some reason there were zero jobs, it would run forever -- added check to break loop
	- Issue 3: Status updates were not showing in the $ResultsListBox

Added more PowerShell Charts!
	- Active Directory groupboxes
	- Login Activity for PSSessions

Disabled the Maximize Window button for the PoSh-EasyWin GUI

Added auto save and load of selected options
	- Options are saved under the Settings directory
	- The are saved immedately and loaded automatically

Added Desktop Shortcut creation
	- Double click shortbut prompts for credential elevation
	- Includes PoSh-EasyWin Icon for image

Added variable for Initial Script Load
	- $InitialScriptLoadTime
	- Script Launch Time - This in placed within both the title of the Main PoSh-EasyWin form and the title of the System Tray Notification
	- Useful if multiple instances of PoSh-EasyWin are launched and you want to use the Abort/Reload or Exit Tool buttons on the corrent instance


Added three more options to the context menues when you click on a computer treenode
	- Context Menu Buttons for selected endpoint
		- Remote Desktop
		- PSSession
		- PSExec
	- What this does for you is remove the need to uncheck all hosts if you want to quickly connect to a single host

Addeded System Tray Icon
	- Immediately superceeded the Helper Form external to the Main GUI -- may implement a version of it later
	- Launches immediately after accepting the EULA
	- Added PoSh-EasyWin Icon
	- Recommend changing settings for uses so that it is always displayed
	- Purpose to reload and close PoSh-EasyWin if it hangs
		- Can close/reload in the middle of any PoSh-EasyWin task without opening the taskmager... hell yeah
	- It's small with three buttons	
		- Abort / Reload
		- Exit Tool
	- The managing of closes is being worked with PIDs
		- The PIDs for the main form and the helper are stored in variables
		- As such, they both close each other when one or the other closes

Replaced "$Dependencies\Images\favicon.ico" thoughout script with variable $EasyWinIco

Had issule with Variable re-use where the queried data from one dashboard would 'bleed' into another if there was no data present, which would present chart data when it shouldn't
	- Ended up renaming the variables in each Dashboard to be unique to that dashboard

Managed Credentials form / Specify Credentials Checkbox
	- Added code to detect and auto load the last saved credentials used. yeah buddy!
	- Upon initial load, or whenever there are no credentials, when you checkbox the 'Specify Credentials' checkbox it will launch the managed credentials form

Finally add a loading window for the main form!
	- No more wondering if it's loading or not!!!
	- Added .hide() to have the Progressbar form hide after it loads the main UI

Added the ability to update charts easily
	- Able to select from three options to load from
		- Pull new data from endpoints using the computers from the current charts displayed
		- Pull new data from check boxed endpoints
		- Pull archived data from previous collections
	- Added ability to select protocol, and wrote commands for each	
		- WinRM (default)
		- RPC
		-SMB
	- Added 'Enriched' checkbox to use scripts to pull additional data
		- only available for WinRM options
		- tends to be slower to collect data because... duh, it's a script and it tends to do way more on the endpoints like hashing files
	- New collected data is also saved locally
		- CSV files
		- XML files
	- So far completed....
		- Proceesses

need to finish accounts code for indiviual execution!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Overhauled a lot of the scripts to better coding (lol... I keep learning better methods), increased compatiblity, and reduced size
 
Added the ability to search by filehash on endpoints, within the file search tab
	- Supports the following hash algorithms 'Filename','MD5','SHA1','SHA256','SHA384','SHA512','RIPEMD160'

Optimized the file search feature
	- results are now sorted and uniqued to elimiate redundace comparing/searching and file hashing

Created a new high level tab called 'Interactions'
	- Moved two tabs to the Interactions tab
		- Executables
		- Actions

Excluded RunspaceID property from results collected in Session Based Mode

BUG!!!!!!!!!!!!!!!!!!!!! scanning and enumeration, unable to scan two hosts my their hostnames---only one at a time, and it's the last one

Updated the Get-NetworkConnectionsTCPEnriched
	- standardized parameters for both Get-NetTCPCOnnection and netstat.exe

Added new Action to the Action Tab
	- Logout accounts from multiple endpoints

Renamed the 'Managed List' tab to 'Import Data'
	- Added 'Import Account Data' within the 'Import Data' Tab <===================================add more

Added a reference button for the following
	- 'Select Location' Button under Registry Tab - opens 'Reference Registry Locations.csv' file with out-GridView
	- 'Referece' Button under Accounts Tab - opens 'Reference Accunt Information.csv' file with out-GridView

Removed 'Process Info' Directory and all its .txt files from the Dependencies dir and created a 'Reference Process Information.csv' in it's place
	- Removed all it's code to that dynamically created tabs...and data

Renamed some code .ps1 files for standarization

Fixed some bugs with the 'Execute Script' Button not turning green when eligible to execute commands
	- Ended up being a bug I introduced when changinng some variable names to make the script easier to understand
	- Also implemented that the 'Execute Script' button is disabled when not eligble to execute quieries and whatnot

Rewrote the code for the GUI that prompts the user if the GUI is being launched without elevated privileges
	- Changed it from VisualBasic code to proper .NET Winform
	- Every launch now opens in a new hidden powershell terminal
		- Removes the parent-child relationshiop with the inital terminal
		- Hides the objects that are loaded to increase speed and eliminate eye sore

Added a form scaling GUI that allows the user to specify the GUI size visually
	- remove the parameter -FormScale
	- Addded code to check for and crate a Settings folder to house settings files
	- The form scale GUI is launched upon load it's file is not located within the Settings folder
	- If the Settings file exists and has a decimal value between 1 and 3, the form scale GUI is not launch automatically
	- You can manually launch the form scaling GUI, a button is located within the options tab
		- After manually settings, the PoSh-EasyWin GUI will relaunch	

Added Form Scale Button under the Options Tab
	- Launches the Form Scale GUI to resize PoSh-EasyWin

Added ability to send User Specified Executables and Custom Script to endpoints
	- Able to select a specific file or a whole directory to copy to the endpoint(s)
	- Able to specify the script that conducts actions on the endpoint(s)
	- Data is not copied back nor cleaned up - this has to be done manually or scripted by the user
	- Able to specify the destination folder that the contents are copied to
	- Support for both session based and individual execution modes

Remote Desktop - modified command to include /NoConsentPrompt

Created script to collect PowerShell History Commands
	- Iterates through all user profiles for the PowerShell History

Computer TreeView 
	- Added code to better handle the checking of host data notes modification. It no longer prompts you when you select a category or root node, only endpoint nodes when data is modified
	- Fixed bug with unchecking unresponsive hosts... it now unchecks the root computer treeview node, otherwise it would automatically recheck all endpoints

Added support to execute remote Powershell and native cmds via PSExec...
	- Support for PowerShell Cmdlets
	- Support for WMI commands
	- Support for Native Commands
	- PowerShell cmdlet results are converted to object data

###### Individual Execution - each line/query is not showing up when execution happens

Updated the Endpoint Commands csv file to include:
	- SMB Connections
	- SMB Mappings
	- SMB Open Files
	- PowerShell Command History

Added two Select All Buttons in the event log section to select all their respective sections

Fixed a Registry checkbox issue, made it so that when the search checkbox was selected at the top that it remembered which of the three below were previous selected

Added parameter for Scaling the GUI
	- the default value is 1
	- a value of 2 to 3 is ideal for HD and 4k monitors
	- able to put in decimal values, ex: 2.25
	- technically able to go smaller... but beware, some form items dont scale well or even at all, like the checkbox

Changed the Host Data Notes from a textbox to a richtextbox
	- added undo/redo feature
	- added select all, copy, and paste

Optimized Individual Execution
	- Added RPC Check option to remove unresponsive hosts

Added an Actions Tab
	- This section is designed to conduct limited actions on endpoints across the network/domain
	- Added the ability to stop multiple processes from multiple endpoints. You must first run a get process to conduct this against first.
	- Added 'Multi-Endpoint Process Stopper'
	- Added 'Multi-Endpoint Service Stopper'
	
Compressed Get-BrowswerDateFromRegistry with 7Zip to avoid Windows Defender triggering on it as malware
	- Reviewed script and tested it within Virus Total... only Microsoft triggers it as a trojan, but it's not
	- The script gathers history information from the registry from internet broswers: Chrome, Firefox, IE, Safari
	- File Name: Get-BrowserDataFromRegistry (Password=EasyWin).7z
	- Password:  EasyWin
	- Added code to exclude the zip file from attempted to being imported into the commands treeview

Adding back in support for remote memory capture
	- Rewriting old code
	- Added Button to GUI

Removed the following buttons and added them to the computer treeview context menu
	- Ping
	- RPC Check
	- WinRM Check

Computer Treeview Context Menu, Added endpoint number check that ensures at least one endpoint is checked to the following:
	- Ping
	- RPC Check
	- WinRM
	- Uncheck all
	- Tag All
	- Move All

Moved the context menu code to external .ps1 files 		

==================================================
v4.5 - 8 June 2020
==================================================
Updated Credential Management section and Auto Credential Rolling
	- Added domain name entry to increase credential support
	- Revised logic to optimize performance, better flow and performance

Modified a couple of commands within the 'Commands - Active Directory.csv'
	- Added specific queries for AD User and Computers specific to creating charts based of their various property dates

Added two new Dashboard charts
	- Active Directory User Accounts
	- Active Directory Computers

Added mouseenter,mouseleave, and mousehover to two textboxes within the Import from AD button:
	- Domain Name - moving the curse over removes the default text and also provides a tool tip
	- Hostname/IP - moving the curse over removes the default text and also provides a tool tip

Minor GUI tweaks throughout... lol, OCD

Bug Fixes
	- Fixed remote desktop issue with swithing between stored credentials. The rdp session held on to the previous credentials despite assigning new credentials to the credential object of $script:credential. Ended up being that the cmdkey native program was the one storeing previous credentials in memory, had to use cmd /delete <computer> and cmd /delete /<username> to clear the credentials from cmdkey memory, then I was able to assign new credtials with it. cmdkey is only being used to support mstsc's lack of accepting credential objects.  
	- Changed the 250 character random alpha-numeric password to 32, mainly there were performance issues with Remote Desktop and cmdkey not passing the credential well. In fact, my testing showed that I couldn't use a password longer than 64 characters, but demenstarted more success attempts when the password length was at 32. 
	- Also added a 5 second delay after rolling creds for Remote Desktop connections, this seems to help with the stability of cmdkey passing creds to mstsc... possibly a race condition with changing the account credentials, but not likely. Couldn't quite narrow it down... sometimes I still have to click on Remote Desktop button a few times before being able to connect.

==================================================
v4.4 - 5 June 2020
==================================================
Created serveral more dashboards
	- Network Interfaces
	- Security Patches
	- SMB Shares
	- Startups
	- Software
	- ... more to follow upon next update, I've pleanty of ideas... I also welcome to recommendations

Import From AD - Created new Form to assist with easier Importing via 3 options
	- 1. Import from Domain
	- 2. Import from Active Directory via WinRM
	- 3. Import from Active Directory (localhost)

Updated Get-RegistryStartupCommands.ps1 to include the name property within it's object data
	- Name = Split-Path $value -Leaf

Computer Treeview Search
	- Optimized searching speed
	- Results how are tagged with their source to assist in narrowing down data
	- Fixed issue with search feature that searches through processes, services, and network connections collections for search criteria... this problem arose from when I upgraded to session based queries and that those results no longer saved data in 'Individual Results'
	- Fixed the same issue as above... but for Retrievinig alternate data stream files
Updated Function Message-HostAlreadyExists to support both displaying data on ResultsListBox and the popup messagebox depending on the context and parameter provided

Tweeked the Conduct-NodeAction script
	- Commented out several $StatusListBox and $ResultsListBox updates... not really necessary, more annoying now that anything
	- Commented out .SelectedTabs that selected the $ResultsListBox... no longer needed

MouseHover Help
	- Import from AD steps
	- Import from CSV steps
	- Import from txt steps

Added some missing PoSh-EasyWin icons to several System.Windows.Forms.Form that were missing them

Created a popup messagebox that notifies you that you must manually save certain computer treeview modifications, such as
	- Importing from AD
	- Importing from CSV
	- Importing from TXT

Optimized the Tag All feature, it now saves faster and also provides a status update on the progress bar.

Fixed Bugs
	- When selecting hosts to query using session based querying, subsequent queries didn't reflect a different computer count
	- Looked into a bug where with the Retrieved File function wasn't working... well at least not on the online range, but it works perfectly on my local lab... added a Start-Sleep -Milliseconds 250 to see if it helps...? otherwise idk, may have to ts the script live while in the cloud
	- Retrieve files from remote hosts wasn't working... ended up that I forgot to add the code that supported usinig alternate credentials

==================================================
v4.3 - 1 June 2020
==================================================

Added Endpoint Packet Capture pcapng
	- Uses netsh trace command
	- Able to specify duration
	- Able to specify the max file size

Added support for Progress bar for Ping, WinRM, and RPC Checks

Query History update
	- New history nodes are added with the most recent (date wise) on top

Within the Query Exploration Tab, changed the Details section .textbox to .RichTextBox 
	- Among other things, this now displays the command description where it recognizes the return cariages
	- Also added support for copy and past...

Added code to auto-select the Rusults Tab when Event Logs Quick Selection or Event Logs To Monitor are selected 

Fixed bugs
	- The endpoint name now shows up when 'Importing from AD' when using 'Query from a Single Host'.
	- Moved SingleHostIPCheckBox.ps1 from the combobox dir to checkbox dir...oops... allows for the checkbox to correctly grey/white the treeview when checked/uncheded
	- Moved code around to fix issue RPC command count... working now
	- The statistics section wasn't working... ended up renaming a script file from Get-PoShACMEStatistics.ps1 to Get-PoShEasyWinStatistics.ps1 ... this one escaped me when I was upgrading the overall program name
	- Fixed statistics counting of commands to update number of commands selected
	- Fixed an issue where the Results List section was clearing after the execution completion

==================================================
v4.2 - 28 May 2020
==================================================
Added Context Menus for Computer TreeView
	Individual Endpoint Selection
	- Collapse/Expand
	- Tag
	- Add Endpoint
	- Rename
	- Move
	- Delete
	Checked Endpoints
	- Uncheck All
	- Tag All
	- Move All
	- Delete All

Added autosave function to all all features of Computer TreeView

Added confirmation when deleting computer nodes

Conversely, removed all the above equivalent buttons from the Manage List Tab

Developed a working concept for packet capture at each endpoint
	- Will be implemented in the next release

Fixed various bugs and optimized code
	
==================================================
v4.1 - 26 May 2020
==================================================
Updated the main code to have large graphcial text to assist with viewing and finding separate sections of code

Fixed Multi-Series Bug
	- Issue with 'Most Recent', Baseline, and Previous chart values not aligning

Not specific to PoSh-EasyWin
	- But I created a new PowerShell project on my GitHub: PoSh-PopQuiz
		As the name alludes to, it'a PowerShell Quiz generator, it pulls its question bank from Get-Help
	- Uploaded PoSh-PortMonitor as a separate GitHub Project too
		It's no longer package with PoSh-EasyWin

PoSh-EasyWin cmdlet/script Parameters (commandline support)
	- Renamed a few parameter switches and gave them defaults
	- Added the -Credential parameter to immedately launch PoSh-EasyWin with alternate credentials
	- Added support for Get-Help PoSh-EasyWin -Online
		- This will now open my github page
	- Added the abilty to change font based, valid fonts are included in the font validation set
	- Added parameter to accepts EULA from command line, this prevents that gui from displaying
	- Added GUI as the default parameteranameset
		- When computer names are provided via command line, the computer tree nodes will auto check/select
	- Added No GUI parameternameset
		- when computer names are provided via command line, the hosts will be auto check/select
	- Added ComputerName parameter
		- added aliass for common variants
			- PSComputerName
			- CN	
			- MachineName
		- added acceptpipeline input for this parameter
		- allows support for more than one input [string[]]
	- Added ComputerSearch parameterset
		- allows you to search for computers by their NetBIOS name, IP, MAC, OS, OU/CN, Tags, and notes (all metadata essentailly)
		- allows support for more than one input [string[]]
	- Added FilterOutComputer parameter
		- allows support for more than one input [string[]]
		- filters out only by computer's NetBIOS name, nothing else
	- Added FilterInComputer parameter
		- allows support for more than one input [string[]]
		- filters back in only by computer's NetBIOS name, nothing else
			- and they have had to be originally a part of the initial search
	- Added Protocol parameter
		- WinRM
		- RPC *****Still need to add support*****
	- Added CommandSearch parameter
		- allows you to search for commands by thier displayed name, command, notes, and tags
		- allows support for more than one input [string[]]
		- added ability to find command via string entry that searches through the command syntax
	- Added FilterOutCommand parameter
	- Added FilterInCommand parameter
	- Added AudioCompletionMessage parameter
	- Added JobTimeout parameter
	- Added SaveDirectory parameter



Fixed search feature where results selected didn't show and populate the 'Query Exploration' Tab
	- This was a big issue because when analyst searched for commands, they often clicked on them to see what they would do or see other command options... now this works

Commands Search
	- Updated script to support command line search

Optimization
	-Moved Common button settings to its own file

Bug Fix
	- Had the results tab be automatically switched to when RPC protocols commands are used
	- Fixes get-help toolname graphical text... the help menu apparently doesn't support prepended spaces, so I chage the text art from slant to standard

==================================================
v4.0 - 23 APR 2020
==================================================

Rebranded PoSh-ACME to PoSh-EasyWin
	- PoSh-ACME		PowerShell - Analyst Collection Made Easy
	- PoSh-EasyWin		PowerShell - Endpoint Analysis Solution Your Windows Intranet Needs
	- I did this for a few reasons:
		1. There was another PowerShell project with a similar name, so when co-worker searched for PoSh-ACME 
		they would often get the wrong tool unless they also searched for my handle high101bro
		2. The new name better reflects the tools intent and capability
		3. I kept it an ancronym because who doesn't love tools with catchy names like this? No? ...just me. Okay.
	- Spent some time trying to ensure a smooth transition between the tool name

Created new About tab
	- Added PoSh-EasyWin Graphic and icon
		- Icon needs improvement, I'll have to tinker with it...
	- Added testbox to easily read and PoSh-EasyWin about file
	- Added button to quickly view the GNU GPLv3 license

Added new Session Based querying (the new default)
	- Endpoints that were unable to establish PowerShell Sessions are now automatically unchecked
		- This reduces any hanging connections awaiting to timeout - speeding up the script
	- read more below

There are now three ways to run queries:
	- 1) Individual Execution (No longer the default)
		- Slowest, provides the most visibility of queries by endpoint via the two Progress Bars
			- Noisiest on the network; eg: 10 queries x 10 endpoints = 100 remote connections
			- Also the most localhost (the host running PoSh-EasyWin resource intensive)
		- WinRM and RPC/DCOM protocols are both supported
		- Each query is executed within its own PowerShell session via PowerShell jobs
			- Includes a changeable timeout, defaulted at 600 seconds (10 minutes)
			- This timeout is per command execute per endpoint
			- Query/Protocols can be mixed
		- Results are saved by each command per endpoint as well as compiled by command
	- 2) Compiled script
		- Fast, provides some visibility of endpoint completion via a single Progress Bar
		- Only supports WinRM protocol, non-WinRM commands are wrapped within the WinRM protocol 
		- The compiled script is executed within its own PowerShell session via PowerShell jobs
			- Includes a changeable timeout, defaulted at 600 seconds (10 minutes) 
			- This timeout applies to the whole script and all embedded code has to be completed within that time
			- Queries of other protocols are wrapped within WinRM/Invoke-Command
		- Each query is compiled into a single script and in addition to other endpoint searches
			- The compiled querie are nested into a single Invoke-Command
			- Queries results from an endpoint are returned at the same time
				- Then de-interleaved and saved separately and compiled too
		- The compiled script can be viewed, modified, and validated before execution 
		- Results are saved by each command per endpoint as well as compiled by command
	- 3) Session Based (This is now the default)
		- Fastest, provides limited visibility on task completion
		- Only supports WinRM protocol, non-WinRM commands are wrapped within the WinRM protocol 
		- Each query to an endpoint goes through a single session; one session per endpoint
			- All endpoints are equeried at the same time/near same time (limited by throttle)
			- TO DO: add throttle adjustment
		- Results are saved as compiled files, no separate files per query and endpoint

Compiled script collection mode
	- I have experienced errors when compiling a lot of commands into a single query, but mainly when added in script code nodes
	- http://systemcentersynergy.com/max-script-block-size-when-passing-to-powershell-exe-or-invoke-command/
		- Apparently there is a byte code limit on how much data can be passed to a new PowerShell session as a parameter
		- Apparently this limiit also esist for the Invoke-Command cmdlet
	- The 2014 artical stats:
		- "There is a 12190 byte MAX limit of any script block passed to powershell.exe or invoke-command."
	- Though upon testing, the amount I can pass varies and seems to be much higher; Microsoft may have raised this, but I haven't confirmed it
	- This isn't really a big issue, becuase you should just use Session Based querying instead, but on the other hand this mode does allow you to review the code first
	- Anyways, Added a byte code counter (UTF7) for Compiled Script to help troubleshoot/test this concept
		- I'm having issues nailing down exactly why it fails, with inconsistant byte counts between selecting just scripts and commands
			- note sure if commented out text when passed to PowerShell.exe or Invoke-Command count against the byte count
		- When passing just scripts, a simple quick test shows that 45000 bytes pass, but 46500 would not
			- this ended up bing like 10 scripts passed, though this will vary on file size of those selected
		- When passing just commands, as in ALL query both (WinRM) Posh and (WinRM) WMI commands, I was able to pass up to 64151 bytes successfully
	- Point is the feature works when anaysts don't go crazy and include too many scripts. I'll troubleshoot this more if it is reported to me and becomes an issue somehow

Addded some script checking
	- Checks if any RPC commands are selected and switches collection mode from Session Based to Individual Execution
	- Checks if only WinRM commands are selected while you're in Individual Execution mode, prompts user to use Session Based as it's faster

Working on Rich Text Support for PoSh-EasyWin!!!
	- Many text boxes have been upgraded form textboxes to Rich Textboxes
	- Added support for copy, cut, and paste
	- Currently working on some cool features... mtf

Added Verification popup prior to conducting any task that would put packets on the wire
	- Added verification windows to buttons that result on communication to hosts
	- Still working on the overall one, but most of the simple ones are done

Event Log Collection Tab
	- There is now a default limit on collections of 100; there use to be none, and individuals would end up unnecessarily trying to pull all logs...
	- The date time range is now on by default with a range of 1 day; individuals would not configure it and would end up unnecessarily pulling logs from forever...!

Event Viewer
	- Added the abilty to use alternate credentials! Yay, this is not natively supported with Show-EventLog, but it now works!

Jobs
	- Modified how 'Individual Execution' saves the results from started jobs
 	  Data is now saved from from Receive-Job rather from within the script
	- Added saving the results as XML data for individual hosts, which saves the data as a complete object
	  Useful for later processing of data... more to follow, needs development, otherwise it may be just a waste of space if no one uses use
	  That said, I should add an option to toggle it on/off...

New Analyst Button - 'Open Data in Shell'
	- Allows you to view and manipulate the results as object data from xml files
	- The results are stored in $Results and passed into a new PowerShell terminal
	- The 'C:\Windows\Temp\PoSh-EasyWin' dir is created, mounted as a PSDrive, and used
	- Also implemented some processing of the data to provide precreated variables for either easy statistics viewing or just to use

Charts
	- Added Auto Generated Filename when saving PowerShell Charts
		- "20YYMMDD @ HHMM.SS - PoSh-EasyWin Chart.png"
	- Change the default saved charts format from .jpg to .png -- it's has better picture quality
	- Fixed Dashbaords where a few charts didn't load initially, now they do
	- Fixed a bug with the 'Services per Host' dashboard chart; also defauled the chart to 'DoughNut'
	- Fixed a bug with the 'Processes per Host' dashboard chart; also defauled the chart to 'DoughNut'
	- Added the ability to pivot from dashboard view to multi-series view!

Treeview
	- When searching for commands, the treeview pane will now auto display the Search Results' new nodes (results) at the top
	- Older searches will auto collapse, but will still clear if channging between views (command & method)
	- Worked on the Query History nodes, optimized the code a bit

Sysinternals 
	- Added support to push Sysinternal tools over WinRM protocol (sysmon, autoruns, procmon)
	- Redesigned the sections appearance
		- Added WinRM or RPC radio buttons
		- Added a recheck time (default 15s) - this is how often the tool will check the status of a sysinternals collection
		- Add groupboxes for easier viewing
	- Added the ability to rename tool names, and also the sysmon's driver name for obfuscation

Network Connections Collection
	- Added the abilty to now easily query for local ports too, not just remote ports
	- Added support code for backwards compatabiliy for processes that started network connections
		- In older Windows/PowerShell versions, the Get-NetTCPConnection cmdlet didn't support the 'OwningProcess' parameter
		- Wrote a script that uses netstat if the parameter doesn't exist to obtain the process data, yay!
	- Added Select Ports button for also the Local Ports query
	- Added Select IPs button to the Remote IP Address query that provides a list to select from which is 
	  populated from the computer tree node, esentiall computers within the network

Modified PoSh-EasyWin GUI
	- Changed 'Execute Query As' from two radio button to a combobox
	- Moved the above combobox to right above the start collection/execute button
	- Buttons now go green after a collection is completed to help prompt the user of what they can do next
	- ProgressBar, changed background color to white

Code Optimization
	- Separated and reorganized code for easy management and navigation
		- Essentially using a lot of 'Dot Sourcing', which is working well
		- Maybe one day I'll start creating/using modules... which will be fun, but I'll do it later
	- This broke a lot initially, spent quite a bit of time trying to test and fix many features... but it should be all good now
	- Rewrote the recursive search section for easier implementation and backwards compatability with older OSs

Fixed random bugs
	- Added messge box if no queries were selected when trying to execute commands as a compile script

... and much more. 

==================================================
v3.3.2
==================================================

Created 'PoSh-EasyWin-Archive' respository
	- Intent is to store past commits online for reference and troubleshooting
	- The PoSh-EasyWin repository will now only contain the most recent release

Started Making Change Log... should have done this a long time ago
	- Attempting to retroactively create/update it

Added Credential Management
	- Elimiates need to constantly enter credentials over and over again when connecting to hosts
	- Able to save/import credentials locally
		- Selected credentials are used to query remote endpoints
		- Encrypted with Windows Data Protection API
		- Decryption restricted to the user and computer that created them
			- Able to view decypted credentials locally
	 	- Supports any number of credentials
	- Able to automatically roll credentials
		- The specified credentials will be automatically changed after every query
		- Two credentials are required:
			- One to query endpoints (this one gets rolled)
			- One to change the rolled credentials within Active Directory
		- Rolled credentials are automatically generated
			- Password Length consists of 250 random characters
			- Passowrd character set: abcdefghiklmnoprstuvwxyzABCDEFGHKLMNOPRSTUVWXYZ1234567890 
			- Able to manually roll credentials too
	- Credentials are able to be used with
		- All remote queries and searches
			- Able to be automaticaly rolled
		- Remote Desktop
			- TO DO: Add auto credential rolling, currently have to manually do so
		- PS Session (remote CLI)
			- TO DO: Add auto credential rolling, currently have to manually do so
		- PSEXEC
			- TO DO: Add auto credential rolling, currently have to manually do so

Added the abiltiy to retrieve any number of files from any number of hosts
	- You first need to query for files using the 'File Search' section
		- Then click on the 'Retrieve Files' button and select one of the csv files
		- Select any number of files to download
	- Retrieved files are zipped on the target enpoint
		- to the C:\windows\temp directory
		- then copied back using WinRM (a single session for multiple files on each endpoint)
			- TO DO: Added WinRM copy function (rather than RPC) to the sysinternals section
	- Files are stored locally as a compressed/zipped files
		- Each file retrieved has metadata collected on it from the endpoint
			- File Properties (extended)
			- File Hashes of individual files (MD5, SHA1, SHA256, SHA512)
				- No hashes if downloading a directory recursively
			- Authenticode Signature Information of individual files (extended)
		- This metadata is saved within the compressed file as 'file details.txt'
	- This establishes a PSSession to each endpoint for the duration of the file copies
		- automatically closes each PSSessions after the last file is copied from each endpoint
	- Button is called 'Retireve Files' and is located in the Main Tab Section beneath 'Analyst Options'
	- Reorganized the buttons in the Main Tab section

Updated Query History Command Nodes
	- Added Persistence
		- Automatically saves previous queries
		- Previous query history is auto-loaded upon startup
	- Able to delete query history nodes
		- Checkbox the query history node then click on the 'Remove Query History' button that appears
		- Auto saves afterwards

Added Regex Examples button to the Registry querying section

Updated the Charts section and fixed some issues
	- TO DO: Added more charts!
	- TO DO: Have the Build Charts section able to create persistent charts/dashboards

Optimized various sections of code
	- Further segmented code from massive single script to imported code sections

Fixed random Bugs

==================================================
v3.3.1
==================================================

Added Registry Querying
	- Query for any number of registry paths for key names, value names, and value data
	- Supports regex and recursive search

Added Copyright License
	- Reference https://www.gnu.org/licenses/
	- The Copyright acknowledgement now display upon every startup
		- This servers as a constant annoyance to notify users
		- And... this is kind of a work around for a resizing issue 	
			- Identified when testing on newer systems when opening results with Out-GridView
			- I can't seem to troubleshoot an exact fix, but others online have had this issue too
	- Attempting to site online references and give credtit to where credit is due

Removed the Memory Collection button
	- Not many users have reported using it
	- TO DO: Refine it and add support for reading the memory dump locally

Added button to reload compile code section
	- Identified an issue where the data was importing weirdly on newer systems
	- Data is read-in two different ways buy clicking a button

Identifed/fixed issue with the Event Log querying
	- WinRM mode was only returning results for queries on the local host, issue was not present with RPC mode

Optimized various sections of code
	- Segmented code from massive single script to imported code sections

Fixed random Bugs
	 